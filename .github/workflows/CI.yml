# https://cpp-linter.github.io/cpp-linter-action/

name: CI

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    pull_request:
        branches-ignore:
            - '*Test*'
    push:
        branches:
            - 'develop'
            - 'main'

jobs:
    Build:
        permissions: {}
        runs-on: ubuntu-latest
        env:
            GH_PAT: ${{ secrets.PMW_CI_PAT }}
            GH_USER_NAME: vacmg

        steps:
            -   name: "Import GitHub credentials" # ~/.gitconfig
                run: |
                    git config --global --replace-all "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" ssh://git@github.com:
                    git config --global --add "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" git@github.com:
                    git config --global --add "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" https://github.com/

            -   name: "Checkout repository"
                uses: actions/checkout@v4

            -   name: Cache Build Environment
                id: CacheBuildEnvironment
                uses: actions/cache@v4
                with:
                    key: "${{ runner.os }}-${{ hashFiles('Source/**', 'Tests/**') }}-build"
                    path: 'build'

            -   name: Configure CMake
                if: steps.CacheBuildEnvironment.outputs.cache-hit == '' # If the cache was not restored
                run: mkdir build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -S . -B ./build

            -   name: Build Project
                if: steps.CacheBuildEnvironment.outputs.cache-hit == '' # If the cache was not restored
                run: cmake --build ./build --target SettingsStorageLib

            -   name: Build Tests & Dependencies
                if: steps.CacheBuildEnvironment.outputs.cache-hit == '' # If the cache was not restored
                run: cmake --build ./build

    Test-Coverage:
        permissions: {}
        runs-on: ubuntu-latest
        needs: Build

        steps:
            -   name: "Checkout repository"
                uses: actions/checkout@v4

            -   name: Restore cached build environment
                uses: actions/cache/restore@v4
                with:
                    key: "${{ runner.os }}-${{ hashFiles('Source/**', 'Tests/**') }}-build"
                    path: 'build'

            -   name: Test
                run: build/Tests/*_GoogleTestsExe

            -   name: Install Coverage Report tool
                run: sudo apt-get update && sudo apt-get install -y gcovr

            -   name: Generate Coverage Report
                run: gcovr --sonarqube -r $GITHUB_WORKSPACE > ${{runner.workspace}}/coverage.xml

            -   name: Cache Coverage Report
                uses: actions/cache/save@v4
                with:
                    key: "${{ runner.os }}-coverage-${{ github.sha }}"
                    path: '${{runner.workspace}}/coverage.xml'

    Valgrind:
        permissions: {}
        runs-on: ubuntu-latest
        needs: Build

        steps:
            -   name: Install Valgrind tool
                run: sudo apt-get update && sudo apt-get install -y valgrind

            -   name: "Checkout repository"
                uses: actions/checkout@v4

            -   name: Restore cached build environment
                uses: actions/cache/restore@v4
                with:
                    key: "${{ runner.os }}-${{ hashFiles('Source/**', 'Tests/**') }}-build"
                    path: 'build'

            -   name: Valgrind Memory Check Report Generation
                run: valgrind --error-exitcode=1 --tool=memcheck --xml=yes --xml-file=${{runner.workspace}}/valgrind.xml --show-error-list=yes --leak-check=full --leak-resolution=high --track-origins=yes --vgdb=no build/Tests/*_GoogleTestsExe

            -   name: Cache Valgrind Report
                uses: actions/cache/save@v4
                with:
                    key: "${{ runner.os }}-valgrind-${{ github.sha }}"
                    path: '${{runner.workspace}}/valgrind.xml'

    Linter:
        runs-on: ubuntu-latest
        needs: Build
        env:
            GH_PAT: ${{ secrets.PMW_CI_PAT }}
            GH_USER_NAME: vacmg

        permissions:
            contents: write
            pull-requests: write

        steps:
            -   name: "Import GitHub credentials" # ~/.gitconfig
                run: |
                    git config --global --replace-all "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" ssh://git@github.com:
                    git config --global --add "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" git@github.com:
                    git config --global --add "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" https://github.com/

            -   name: "Checkout repository"
                uses: actions/checkout@v4

            -   name: Configure CMake
                working-directory: ${{ runner.workspace }}
                run: mkdir build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -S $GITHUB_WORKSPACE -B ./build

            -   name: Linter
                uses: cpp-linter/cpp-linter-action@v2
                id: linter
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    version: 19
                    ignore: 'Source/deps/'
                    style: 'file'  # Use .clang-format config file
                    tidy-checks: '' # Use .clang-tidy config file
                    database: '${{ runner.workspace }}/build'
                    step-summary: true
                    tidy-review: true
                    format-review: true
                    lines-changed-only: false # Only Check the lines that have changed
                    files-changed-only: true # Only check the files that have changed
                    # only 'update' a single comment in a pull request thread.
                    thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}

            -   name: Clang Tidy Fail Check
                if: steps.linter.outputs.clang-tidy-checks-failed > 0
                run: exit 1 # To enable or disable this check as an error, run exit 1 / exit 0.

            -   name: Clang Format Fail Check
                if: steps.linter.outputs.clang-format-checks-failed > 0
                run: exit 1 # To enable or disable this check as an error, run exit 1 / exit 0.

    Sonar:
        permissions: {}
        runs-on: ubuntu-latest
        needs:
            - Test-Coverage
            - Valgrind
        env:
            BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
            GH_PAT: ${{ secrets.PMW_CI_PAT }}
            GH_USER_NAME: vacmg

        steps:
            -   name: Restore cached Coverage Report
                uses: actions/cache/restore@v4
                with:
                    key: "${{ runner.os }}-coverage-${{ github.sha }}"
                    path: '${{runner.workspace}}/coverage.xml'
                    fail-on-cache-miss: true

            -   name: Restore cached Valgrind Report
                uses: actions/cache/restore@v4
                with:
                    key: "${{ runner.os }}-valgrind-${{ github.sha }}"
                    path: '${{runner.workspace}}/valgrind.xml'
                    fail-on-cache-miss: true

            -   name: "Import GitHub credentials" # ~/.gitconfig
                run: |
                    git config --global --replace-all "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" ssh://git@github.com:
                    git config --global --add "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" git@github.com:
                    git config --global --add "url.https://$GH_USER_NAME:$GH_PAT@github.com/.insteadOf" https://github.com/

            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis.

            -   name: Install Sonar Build Wrapper
                uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4

            -   name: Run Sonar Build Wrapper
                run: |
                    mkdir build
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -S $GITHUB_WORKSPACE -B ./build
                    build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ./build

            -   name: SonarQube Scan
                uses: SonarSource/sonarqube-scan-action@v4
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                with:
                    args: >
                        --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
                        --define sonar.coverageReportPaths=${{runner.workspace}}/coverage.xml
                        --define sonar.cfamily.valgrind.reportsPaths=${{runner.workspace}}/valgrind.xml
                        --define sonar.analysis.cache.enabled=false

    merge-gatekeeper:
        if: ${{ always() && github.event_name == 'pull_request' }}
        runs-on: ubuntu-latest
        needs:
            - Build
            - Test-Coverage
            - Valgrind
            - Linter
            - Sonar
        # Restrict permissions of the GITHUB_TOKEN.
        # Docs: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
        permissions:
            checks: read
            statuses: read
        steps:
            -   name: Run Merge Gatekeeper
                  # NOTE: v1 is updated to reflect the latest v1.x.y. Please use any tag/branch that suits your needs:
                #       https://github.com/upsidr/merge-gatekeeper/tags
                #       https://github.com/upsidr/merge-gatekeeper/branches
                uses: upsidr/merge-gatekeeper@v1
                with:
                    ignored: 'SonarCloud Code Analysis'
                    token: ${{ secrets.GITHUB_TOKEN }}

    success:
        permissions: {}
        runs-on: ubuntu-latest
        needs:
            - merge-gatekeeper
        if: always()
        steps:
            -   name: Check merge-gatekeeper result
                run: |
                    if [ "${{ needs.merge-gatekeeper.result }}" = "failure" ]; then
                      echo "Merge Gatekeeper failed."
                      exit 1
                    fi
                    echo "CI passed."
