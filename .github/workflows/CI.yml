# https://cpp-linter.github.io/cpp-linter-action/

name: CI

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    push:
        branches-ignore:
            - '*Test*'
    pull_request:
        branches-ignore:
            - '*Test*'

jobs:
    Test:
        runs-on: ubuntu-latest

        defaults:
            run:
                shell: bash

        steps:
            -   name: Cache git submodules
                uses: actions/cache@v4
                with:
                    key: "${{ runner.os }}-git-${{ github.ref_name }}"
                    path: ".git"
                    restore-keys: "${{ runner.os }}-git-"

            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    submodules: 'recursive'
                    token: ${{ secrets.SubmoduleToken }}

            -   name: Cache Coverage Report
                uses: actions/cache@v4
                with:
                    key: "${{ runner.os }}-coverage-${{ github.sha }}"
                    path: '${{runner.workspace}}/coverage.xml'

            -   name: Configure CMake
                run: mkdir build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -S . -B ./build

            -   name: Build
                run: cmake --build ./build

            -   name: Test
                run: build/Tests/SettingsStorage_GoogleTestsExe

            -   name: Install Coverage Report tool
                run: sudo apt-get install -y gcovr

            -   name: Generate Coverage Report
                run: gcovr --sonarqube -r $GITHUB_WORKSPACE > ${{runner.workspace}}/coverage.xml


    Linter:
        runs-on: ubuntu-latest
        needs: Test

        defaults:
            run:
                shell: bash

        permissions:
            contents: write
            pull-requests: write

        steps:
            -   name: Cache git submodules
                uses: actions/cache@v4
                with:
                    key: "${{ runner.os }}-git-${{ github.ref_name }}"
                    path: ".git"
                    restore-keys: "${{ runner.os }}-git-"

            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    submodules: 'recursive'
                    token: ${{ secrets.SubmoduleToken }}

            -   name: Configure CMake
                working-directory: ${{ runner.workspace }}
                run: mkdir build && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -S $GITHUB_WORKSPACE -B ./build

            -   name: Linter
                uses: cpp-linter/cpp-linter-action@v2
                id: linter
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    version: 19
                    ignore: 'Source/deps/'
                    style: 'file'  # Use .clang-format config file
                    tidy-checks: '' # Use .clang-tidy config file
                    database: '${{ runner.workspace }}/build'
                    step-summary: true
                    tidy-review: true
                    format-review: true
                    lines-changed-only: false # Only Check the lines that have changed
                    files-changed-only: false # Only check the files that have changed
                    # only 'update' a single comment in a pull request thread.
                    thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}

            -   name: Clang Tidy Fail Check
                if: steps.linter.outputs.clang-tidy-checks-failed > 0
                run: exit 1 # To enable or disable this check as an error, run exit 1 / exit 0.

            -   name: Clang Format Fail Check
                if: steps.linter.outputs.clang-format-checks-failed > 0
                run: exit 1 # To enable or disable this check as an error, run exit 1 / exit 0.
    Sonar:
        runs-on: ubuntu-latest
        needs: Test
        env:
            BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
        steps:
            -   name: GetCoverageReport
                uses: actions/cache@v4
                with:
                    key: "${{ runner.os }}-coverage-${{ github.sha }}"
                    path: '${{runner.workspace}}/coverage.xml'

            -   name: Exit if no coverage report found
                run: |
                    if [ ! -f ${{runner.workspace}}/coverage.xml ]; then
                        echo "No coverage report found"
                        exit 1
                    fi

            -   name: Cache git submodules
                uses: actions/cache@v4
                with:
                    key: "${{ runner.os }}-git-${{ github.ref_name }}"
                    path: ".git"
                    restore-keys: "${{ runner.os }}-git-"

            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    submodules: 'recursive'
                    token: ${{ secrets.SubmoduleToken }}
                    fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis.

            -   name: Install sonar-scanner and build-wrapper
                uses: sonarsource/sonarcloud-github-c-cpp@v3

            -   name: Run build-wrapper
                run: |
                    mkdir build
                    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_C_FLAGS=--coverage -S $GITHUB_WORKSPACE -B ./build
                    build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ./build

            -   name: Run sonar-scanner
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                run: |
                    sonar-scanner --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \
                    --define sonar.coverageReportPaths=${{runner.workspace}}/coverage.xml
